@model E_CookBook.Models.Recipe

@{
    ViewData["Title"] = "Create";
    List<IngredientViewModel> existingIngredients = (List<IngredientViewModel>)ViewBag.ExistingIngredients;
}

<h1>Create</h1>

<h4>Recipe</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">Add a photo</label>
                <input id="RecipePhoto" name="RecipePhoto" type="file" accept="image/jpeg, image/png, image/gif" class="form-control" onchange="validatePhoto(this)" />
            </div>
            <div class="form-group">
                <label asp-for="CookingTime" class="control-label"></label>
                <input asp-for="CookingTime" class="form-control" />
                <span asp-validation-for="CookingTime" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Portion" class="control-label"></label>
                <input asp-for="Portion" class="form-control" />
                <span asp-validation-for="Portion" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Instructions" class="control-label"></label>
                <textarea asp-for="Instructions" class="form-control"></textarea>
                <span asp-validation-for="Instructions" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Source" class="control-label"></label>
                <input asp-for="Source" class="form-control" />
                <span asp-validation-for="Source" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Category.Name" class="control-label"></label>
                <select asp-for="CategoryID" class="form-control" asp-items="ViewBag.Categories">
                    <option value="" disabled selected>Select an Option</option>
                </select>
                <span asp-validation-for="CategoryID" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PriceCategory.Name" class="control-label"></label>
                <select asp-for="PriceCategoryID" class="form-control" asp-items="ViewBag.PriceCategories">
                    <option value="" disabled selected>Select an Option</option>
                </select>
                <span asp-validation-for="PriceCategoryID" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Tags" class="control-label"></label>
                <input asp-for="Tags" class="form-control" hidden />
                <div id="tagBadgeList">
                </div>
            </div>
            <input id="IngredientCount" name="IngredientCount" hidden />
            <table id="ingredientsTable">
                <tr>
                    <th>Section</th>
                    <th>Quantiy</th>
                    <th>Metric</th>
                    <th>Name</th>
                    <th></th>
                </tr>
            </table>
            <br />
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
        <br />
        <div class="form-group">
            <input type="text" class="tag-input" placeholder="Add a tag...">
        </div>
        <br />
        <div class="form-group">
            <button id="addIngrButton" onclick="addIngredientSpecification()">Add Ingredient</button>
        </div>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    }

    <script>
        var ingredientCount = 0;
        const tagInput = document.querySelector('.tag-input');

        document.loaded = afterLoad();

        function afterLoad() {
            manageIngredients();
            manageInstructions();
        }

        function manageInstructions() {
            var existingInstructions = @Html.Raw(JsonConvert.SerializeObject(ViewBag.ExistingInstructions));
            if (existingInstructions != null) {
                document.getElementById("Instructions").value = existingInstructions;
            }
        }

        tagInput.addEventListener('keydown', function (e) {
            if (e.key === 'Enter' && tagInput.value.trim()) {
                addTag(tagInput.value.trim());
                tagInput.value = '';
            }
        });

        function addTag(text) {
            var tagBadge = document.createElement("span");
            tagBadge.classList.add("badge");
            tagBadge.classList.add("rounded-pill");
            tagBadge.classList.add("text-bg-primary");
            tagBadge.classList.add("badge-background-color");
            tagBadge.innerText = text;

            var deleteButton = document.createElement("button");
            deleteButton.type = "button";
            deleteButton.classList += "btn-close";
            deleteButton.addEventListener('click', function () {
                var badge = this.closest('.badge');
                badge.parentNode.removeChild(badge);

                var tagsInput = document.getElementById("Tags");
                tagsInput.value = '';
                var allTags = document.getElementById("tagBadgeList").getElementsByTagName("span");
                for (var i = 0; i < allTags.length; i++) {
                    tagsInput.value += (allTags[i].textContent + "|and|");
                }
            });

            tagBadge.appendChild(deleteButton);
            document.getElementById("tagBadgeList").appendChild(tagBadge);
            document.getElementById("Tags").value += (text + "|and|");
        }

        function manageIngredients() {
            var existingIngredientsList = @Html.Raw(JsonConvert.SerializeObject(existingIngredients));
            if (existingIngredientsList != null) {
                for (var i = 0; i < existingIngredientsList.length; i++) {
                    addIngredientSpecification();
                    loadIngredientValues(existingIngredientsList[i]);
                }
            }
        }

        function loadIngredientValues(existingIngredient) {
            document.getElementById("IngredientName_" + ingredientCount.toString()).value = existingIngredient.IngredientName;
            document.getElementById("Metric_" + ingredientCount.toString()).value = existingIngredient.Metric;
            document.getElementById("MetricName_" + ingredientCount.toString()).value = existingIngredient.MetricName;
        }

        function addIngredientSpecification() {
            ingredientCount++;
            document.getElementById("IngredientCount").value = ingredientCount;

            var table = document.getElementById("ingredientsTable");
            var newRow = table.insertRow();

            var sectionCell = newRow.insertCell(0);
            var metricCell = newRow.insertCell(1);
            var metricNameCell = newRow.insertCell(2);
            var nameCell = newRow.insertCell(3);
            var deleteCell = newRow.insertCell(4);

            var deleteButton = document.createElement("button");
            deleteButton.type = "button";
            deleteButton.classList += "btn-close";
            deleteButton.addEventListener('click', function () {
                // Get the button's parent <td> element and then its parent <tr> element
                var row = deleteButton.parentElement.parentElement;

                // Remove the <tr> element (row) from the table
                row.parentNode.removeChild(row);
            });

            sectionCell.appendChild(createInput("text", "Section"));
            nameCell.appendChild(createInput("text", "IngredientName"));
            metricCell.appendChild(createInput("number", "Metric"));
            metricNameCell.appendChild(createInput("text", "MetricName"));
            deleteCell.appendChild(deleteButton);
        }

        function createInput(type = "text", nameAndID = "Default") {
            var input = document.createElement("input");
            input.type = type;
            input.name = nameAndID + "_" + ingredientCount.toString();
            input.id = nameAndID + "_" + ingredientCount.toString();

            return input;
        }

        function validatePhoto(inputElement) {
            const file = inputElement.files[0];
            if (file) {
                const fileType = file['type'];
                const validImageTypes = ['image/jpeg', 'image/png', 'image/gif'];

                if (!validImageTypes.includes(fileType)) {
                    alert('Please upload a valid image.');
                    inputElement.value = '';  // Clear the input
                }
            }
        }

    </script>
