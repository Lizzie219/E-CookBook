@model IPagedList<E_CookBook.Models.Recipe>

@{
    ViewData["Title"] = "Index";
    string searchParameter = ViewBag.SearchParameter;
    string option = ViewBag.Option;
    string[] selectedCategories = ViewBag.SelectedCategories;
    string[] selectedPriceCategories = ViewBag.SelectedPriceCategories;
    string[] selectedTags = ViewBag.SelectedTags;
    int? selectedCookingTime = ViewBag.SelectedCookingTime;
}

<h1>Recipes</h1>

<form asp-action="Index" method="get">
    <div class="container">
        <b>Search Option:</b>
        <div class="form-check form-check-inline">
            <input class="form-check-input" type="radio" asp-for="@option" value="Title" checked />
            <label class="form-check-label">Recipe Title</label>
        </div>
        <div class="form-check form-check-inline">
            <input class="form-check-input" type="radio" asp-for="@option" value="Ingredient" />
            <label class="form-check-label">Ingredient</label>
        </div>
        <div class="row">
            <div class="col">
                <input class="form-control" type="text" asp-for="@searchParameter" />
            </div>
            <div class="col">
                <input class="form-submit-input" type="submit" name="submit" value="Search" />
            </div>
        </div>
    </div>
    <br />
    <button type="button" data-bs-toggle="collapse" data-bs-target="#filersDiv" aria-expanded="false" aria-controls="filersDiv">
        Filters
    </button>
    <div class="collapse" id="filersDiv">
        <div class="card card-body container">
            <div class="row">
                <div class="col">
                    <div id="CategorySelect">
                        <label class="display-label-style zomp-green-color">Categories</label>
                        @foreach (var item in ViewBag.Categories)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="selectedCategories" value="@item" id="@item" />
                                <label class="form-check-label" for="@item">@item</label>
                            </div>
                        }
                    </div>
                    <div id="PriceCategorySelect">
                        <label class="display-label-style zomp-green-color">Price Categories</label>
                        @foreach (var item in ViewBag.PriceCategories)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="selectedPriceCategories" value="@item" id="@item" />
                                <label class="form-check-label" for="@item">@item</label>
                            </div>
                        }
                    </div>
                    <div id="CookingTimeSelect">
                        <label for="cookingTimeRange" class="zomp-green-color display-label-style">Maximum Cooking Time</label>
                        <input type="range" class="form-range" min="1" max="@ViewBag.CookingTimeMax" id="cookingTimeRange" name="selectedCookingTime">
                        <label>Value: <span id="cookingTimeRangeValue"></span> minutes</label>
                    </div>
                </div>
                <div class="col">
                    <label class="display-label-style zomp-green-color">Tags</label>
                    <div id="TagsSelect" class="tags-container">
                        @foreach (var item in ViewBag.Tags)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" name="selectedTags" value="@item" id="@item" />
                                <label class="form-check-label" for="@item">@item</label>
                            </div>
                        }

                    </div>
                </div>
            </div>
            <br />
            <input class="form-submit-input" type="submit" name="submit" value="Filter" />
        </div>
    </div>
</form>
<br />
<div class="container">
    @if (Model.Count() == 0)
    {
        <p>
            No Recipe with the given parameters
        </p>
    }
    else
    {
        @foreach (var item in Model)
        {
            <div class="row">
                <div class="card mb-3">
                    <div class="row g-0" style="max-height:220px;">
                        <div class="col-md-4 card-image-container">
                            <a asp-action="Details" asp-route-id="@item.ID" class="card-image-container">
                                <img src="@Url.Content(!string.IsNullOrEmpty(item.PhotoLocation) ? "~/lib/RecipePictures/" + item.PhotoLocation : "~/lib/Images/NoPhoto.png")" class="img-fluid rounded-start" alt="Picture of the recipe">
                            </a>
                        </div>
                        <div class="col-md-8">
                            <div class="card-body">
                                <h5 class="card-title zomp-green-color">@item.Name</h5>
                                <dl class ="card-text">
                                    <dt class="card-text">
                                        @item.Category.Name
                                    </dt>
                                    <dt class="card-text">
                                        @item.PriceCategory.Name
                                    </dt>
                                    <dt class="card-text">
                                        @item.CookingTime<span>-minute</span>
                                    </dt>
                                </dl>
                                <p class="card-text text-truncate"><small class="text-muted">@item.Instructions</small></p>
                                <p class="card-text">
                                    <a class="a-recipe" asp-action="Edit" asp-route-id="@item.ID">Edit</a> |
                                    <a class="a-recipe" asp-action="Details" asp-route-id="@item.ID">Details</a> |
                                    <a class="a-recipe" asp-action="Delete" asp-route-id="@item.ID">Delete</a>
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>
@*<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.First().Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().CookingTime)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().Portion)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().Instructions)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().Source)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().Category.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().PriceCategory.Name)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (Model.Count() == 0)
        {
            <tr>
                <td colspan="7"> No Recipe with the given parameters </td>
            </tr>
        }
        else
        {
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.CookingTime)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Portion)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Instructions)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Source)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Category.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.PriceCategory.Name)
                    </td>
                    <td>
                        <a asp-action="Edit" asp-route-id="@item.ID">Edit</a> |
                        <a asp-action="Details" asp-route-id="@item.ID">Details</a> |
                        <a asp-action="Delete" asp-route-id="@item.ID">Delete</a>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>*@
<nav>
    @Html.PagedListPager(Model, page => Url.Action("Index", new { option = option,
    searchParameter = searchParameter,  pageNumber = page, selectedCategories = selectedCategories, selectedPriceCategories = selectedPriceCategories, selectedTags = selectedTags, selectedCookingTime = selectedCookingTime }), new PagedListRenderOptions()
    {
    ActiveLiElementClass = "active",
    PageClasses = new[]{ "page-link"},
    LiElementClasses=new[] { "page-item" },
    UlElementClasses = new[] { "pagination","justify-content-center", "mt-3" },
    LinkToNextPageFormat = "Next",
    LinkToPreviousPageFormat = "Previous",
    MaximumPageNumbersToDisplay = 5,
    DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
    DisplayLinkToNextPage = PagedListDisplayMode.Always
    })
</nav>
<script>
    var cookingSlider = document.getElementById("cookingTimeRange");
    var currentSliderValueLabel = document.getElementById("cookingTimeRangeValue");
    var textareaForDecode = document.createElement("textarea");
    currentSliderValueLabel.innerHTML = cookingSlider.value; // Display the default slider value
    document.loaded = afterLoad();

    // Update the current slider value (each time you drag the slider handle)
    cookingSlider.oninput = function () {
        currentSliderValueLabel.innerHTML = this.value;
    }

    function afterLoad() {
        //string[] selectedCategories = ViewBag.SelectedCategories;
        //string[] selectedPriceCategories = ViewBag.SelectedPriceCategories;
        //string[] selectedTags = ViewBag.SelectedTags;
        // search
        document.getElementById("searchParameter").value = decodeSpecialInput("@searchParameter");

        // slider
        cookingSlider.value = "@selectedCookingTime";
        currentSliderValueLabel.innerHTML = cookingSlider.value;

        // categories
        var array = @Html.Raw(JsonConvert.SerializeObject(selectedCategories));
        checkboxChecker(array);

        // price categories
        array = @Html.Raw(JsonConvert.SerializeObject(selectedPriceCategories));
        checkboxChecker(array);

        // tags
        array = @Html.Raw(JsonConvert.SerializeObject(selectedTags));
        checkboxChecker(array);
    }

    function checkboxChecker(array) {
        if (array != null) {
            for (var i = 0; i < array.length; i++) {
                document.getElementById(array[i]).checked = true;
            }
        }
    }

    // Special letters are not translated back from html to visible letters, this function makes sure that all letters are readable
    function decodeSpecialInput(input) {
        textareaForDecode.innerHTML = input;
        return textareaForDecode.value;
    }


</script>
